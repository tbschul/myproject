# To work with data
install.packages("tidyverse")
library(tidyverse)
library(conflicted)

#Enable the read_csv function with this package
install.packages("readr")
library(readr)

#Set dplyr to allow dpylr and filter functions: lag as the default choices
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

#Enable the rename fuction in rstudio
install.packages("dplyr")
library(dplyr)

#STEP 1 - COLLECT DATA
#Data collection
#Upload Divvy_trips 2019 & 2020 data sets
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

#STEP 2 - MATCH COLUMNS AND COMBINE INTO SINGLE FILE
#Compare the column names each of the files
#Names don't need same order, but must match
colnames(q1_2019)
colnames(q1_2020)

#Rename columns to make cosistent with q1_2020
(q1_2019 <-rename(q1_2019
           ,ride_id = trip_id
           ,rideable_type = bikeid
           ,started_at = start_time
           ,ended_at = end_time
           ,start_station_name = from_station_name
           ,start_station_id = from_station_id
           ,end_station_name = to_station_name
           ,end_station_id = to_station_id
           ,member_casual = usertype
            ))

#Inspect data frames for incongruencies
str(q1_2019)
str(q1_2020)

#Convert ride_id & rideable_type to character to stack correctly
q1_2019<- mutate(q1_2019, ride_id=as.character(ride_id)
          ,rideable_type=as.character(rideable_type))

#Stacke both data frames into single frame
all_trips<-bind_rows(q1_2019, q1_2020)

#Remove lat, long, birthyear, and gender fields
all_trips <-all_trips %>% 
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "tripduration"))

#Review new table
colnames(all_trips)
nrow(all_trips)
dim(all_trips)
head(all_trips)
str(all_trips)
summary(all_trips)

#Fixes for the data
# (1) two names for 'member_casual' column, ("member" and "Subscriber"0 and ("Customer" and "Casual")
# Consolidate from four to two names
all_trips<- all_trips %>% 
  mutate(member_casual = recode(member_casual
                         ,"Subscriber"="member"
                         ,"Customer" = "casual"))
#Review changes
table(all_trips$member_casual)

# (2) Need to add columns for day, month, year
# Add columns that list date, month, day, and year of each ride
all_trips$date <-as.Date(all_trips$started_at) #default format is yyyy-mm-dd
all_trips$month <-format(as.Date(all_trips$date), "%m")
all_trips$day <-format(as.Date(all_trips$date), "%d")
all_trips$year <-format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <-format(as.Date(all_trips$date), "%A")
    
# (3) Add calculated field for length of ride since 2020Q1 data did not have
# the trip duration column. 
# Add ride_length to the entire dataframe
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)


# Inspect the structure of new columns
str(all_trips)


# (4) Trip durations are showing as negative numbers due to quality control
# reasons, delete negative number rides
# Convert ride_length from Factor to numberic for calculations on data
is.factor(all_trips$ride_length)
all_trips$ride_length <-as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

#Remove bad data/remove negative trip_duration due to quality control check-out
#Create new version of data with removed bad data
all_trips_v2 <-all_trips[!(all_trips$start_station_name == "HQ QR"|all_trips$ride_length<0),]

# STEP 4 CONDUCT DESCRIPTIVE ANALYSIS
mean(all_trips_v2$ride_length) 
median(all_trips_v2$ride_length)
max(all_trips_v2$ride_length)
min(all_trips_v2$ride_length)
# Condensed version, one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# Average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week,
          FUN = mean)

# Reorder day of the week
all_trips_v2$day_of_week <-ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday=wday(started_at, label=TRUE) %>% 
           group_by(member_casual, weekday) %>% 
           summarise(number_of_rides=n()
           ,average_duration=mean(ride_length)) %>% 
           arrange(member_casual, weekday)
         
# tidyverse launch for ggplot (getting error???)
library(tidyverse)    
# Visual for the number of rides per rider type

library(scales)

all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(), 
            average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = label_comma())  # Prevent scientific notation


# Visual for the average duration 
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")

# Export file for further analaysis & visualization
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = 'avg_ride_length.csv')









